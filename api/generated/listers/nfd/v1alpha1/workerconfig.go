/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/node-feature-discovery/api/nfd/v1alpha1"
)

// WorkerConfigLister helps list WorkerConfigs.
// All objects returned here must be treated as read-only.
type WorkerConfigLister interface {
	// List lists all WorkerConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkerConfig, err error)
	// WorkerConfigs returns an object that can list and get WorkerConfigs.
	WorkerConfigs(namespace string) WorkerConfigNamespaceLister
	WorkerConfigListerExpansion
}

// workerConfigLister implements the WorkerConfigLister interface.
type workerConfigLister struct {
	indexer cache.Indexer
}

// NewWorkerConfigLister returns a new WorkerConfigLister.
func NewWorkerConfigLister(indexer cache.Indexer) WorkerConfigLister {
	return &workerConfigLister{indexer: indexer}
}

// List lists all WorkerConfigs in the indexer.
func (s *workerConfigLister) List(selector labels.Selector) (ret []*v1alpha1.WorkerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkerConfig))
	})
	return ret, err
}

// WorkerConfigs returns an object that can list and get WorkerConfigs.
func (s *workerConfigLister) WorkerConfigs(namespace string) WorkerConfigNamespaceLister {
	return workerConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkerConfigNamespaceLister helps list and get WorkerConfigs.
// All objects returned here must be treated as read-only.
type WorkerConfigNamespaceLister interface {
	// List lists all WorkerConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkerConfig, err error)
	// Get retrieves the WorkerConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkerConfig, error)
	WorkerConfigNamespaceListerExpansion
}

// workerConfigNamespaceLister implements the WorkerConfigNamespaceLister
// interface.
type workerConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkerConfigs in the indexer for a given namespace.
func (s workerConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkerConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkerConfig))
	})
	return ret, err
}

// Get retrieves the WorkerConfig from the indexer for a given namespace and name.
func (s workerConfigNamespaceLister) Get(name string) (*v1alpha1.WorkerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workerconfig"), name)
	}
	return obj.(*v1alpha1.WorkerConfig), nil
}
