/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/node-feature-discovery/api/nfd/v1alpha1"
)

// NodeFeatureRuleStatusLister helps list NodeFeatureRuleStatuses.
// All objects returned here must be treated as read-only.
type NodeFeatureRuleStatusLister interface {
	// List lists all NodeFeatureRuleStatuses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeFeatureRuleStatus, err error)
	// NodeFeatureRuleStatuses returns an object that can list and get NodeFeatureRuleStatuses.
	NodeFeatureRuleStatuses(namespace string) NodeFeatureRuleStatusNamespaceLister
	NodeFeatureRuleStatusListerExpansion
}

// nodeFeatureRuleStatusLister implements the NodeFeatureRuleStatusLister interface.
type nodeFeatureRuleStatusLister struct {
	indexer cache.Indexer
}

// NewNodeFeatureRuleStatusLister returns a new NodeFeatureRuleStatusLister.
func NewNodeFeatureRuleStatusLister(indexer cache.Indexer) NodeFeatureRuleStatusLister {
	return &nodeFeatureRuleStatusLister{indexer: indexer}
}

// List lists all NodeFeatureRuleStatuses in the indexer.
func (s *nodeFeatureRuleStatusLister) List(selector labels.Selector) (ret []*v1alpha1.NodeFeatureRuleStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeFeatureRuleStatus))
	})
	return ret, err
}

// NodeFeatureRuleStatuses returns an object that can list and get NodeFeatureRuleStatuses.
func (s *nodeFeatureRuleStatusLister) NodeFeatureRuleStatuses(namespace string) NodeFeatureRuleStatusNamespaceLister {
	return nodeFeatureRuleStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeFeatureRuleStatusNamespaceLister helps list and get NodeFeatureRuleStatuses.
// All objects returned here must be treated as read-only.
type NodeFeatureRuleStatusNamespaceLister interface {
	// List lists all NodeFeatureRuleStatuses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeFeatureRuleStatus, err error)
	// Get retrieves the NodeFeatureRuleStatus from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodeFeatureRuleStatus, error)
	NodeFeatureRuleStatusNamespaceListerExpansion
}

// nodeFeatureRuleStatusNamespaceLister implements the NodeFeatureRuleStatusNamespaceLister
// interface.
type nodeFeatureRuleStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeFeatureRuleStatuses in the indexer for a given namespace.
func (s nodeFeatureRuleStatusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodeFeatureRuleStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeFeatureRuleStatus))
	})
	return ret, err
}

// Get retrieves the NodeFeatureRuleStatus from the indexer for a given namespace and name.
func (s nodeFeatureRuleStatusNamespaceLister) Get(name string) (*v1alpha1.NodeFeatureRuleStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodefeaturerulestatus"), name)
	}
	return obj.(*v1alpha1.NodeFeatureRuleStatus), nil
}
