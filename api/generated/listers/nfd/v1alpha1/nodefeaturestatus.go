/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/node-feature-discovery/api/nfd/v1alpha1"
)

// NodeFeatureStatusLister helps list NodeFeatureStatuses.
// All objects returned here must be treated as read-only.
type NodeFeatureStatusLister interface {
	// List lists all NodeFeatureStatuses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeFeatureStatus, err error)
	// NodeFeatureStatuses returns an object that can list and get NodeFeatureStatuses.
	NodeFeatureStatuses(namespace string) NodeFeatureStatusNamespaceLister
	NodeFeatureStatusListerExpansion
}

// nodeFeatureStatusLister implements the NodeFeatureStatusLister interface.
type nodeFeatureStatusLister struct {
	indexer cache.Indexer
}

// NewNodeFeatureStatusLister returns a new NodeFeatureStatusLister.
func NewNodeFeatureStatusLister(indexer cache.Indexer) NodeFeatureStatusLister {
	return &nodeFeatureStatusLister{indexer: indexer}
}

// List lists all NodeFeatureStatuses in the indexer.
func (s *nodeFeatureStatusLister) List(selector labels.Selector) (ret []*v1alpha1.NodeFeatureStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeFeatureStatus))
	})
	return ret, err
}

// NodeFeatureStatuses returns an object that can list and get NodeFeatureStatuses.
func (s *nodeFeatureStatusLister) NodeFeatureStatuses(namespace string) NodeFeatureStatusNamespaceLister {
	return nodeFeatureStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeFeatureStatusNamespaceLister helps list and get NodeFeatureStatuses.
// All objects returned here must be treated as read-only.
type NodeFeatureStatusNamespaceLister interface {
	// List lists all NodeFeatureStatuses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeFeatureStatus, err error)
	// Get retrieves the NodeFeatureStatus from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodeFeatureStatus, error)
	NodeFeatureStatusNamespaceListerExpansion
}

// nodeFeatureStatusNamespaceLister implements the NodeFeatureStatusNamespaceLister
// interface.
type nodeFeatureStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeFeatureStatuses in the indexer for a given namespace.
func (s nodeFeatureStatusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodeFeatureStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeFeatureStatus))
	})
	return ret, err
}

// Get retrieves the NodeFeatureStatus from the indexer for a given namespace and name.
func (s nodeFeatureStatusNamespaceLister) Get(name string) (*v1alpha1.NodeFeatureStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodefeaturestatus"), name)
	}
	return obj.(*v1alpha1.NodeFeatureStatus), nil
}
